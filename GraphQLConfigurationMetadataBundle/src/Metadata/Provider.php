<?php

declare(strict_types=1);

namespace Overblog\GraphQL\Bundle\ConfigurationMetadataBundle\Metadata;

use Attribute;

/**
 * Annotation for operations provider.
 *
 * @Annotation
 * @NamedArgumentConstructor
 * @Target({"CLASS"})
 */
#[Attribute(Attribute::TARGET_CLASS)]
final class Provider extends Metadata
{
    /**
     * Optionnal prefix for provider fields.
     */
    public ?string $prefix;

    /**
     * Service name to access this provider.
     * Uses the provider class name as service name by default
     */
    public ?string $service;

    /**
     * The default target types to attach the provider queries to.
     *
     * @var array<string>
     */
    public ?array $targetQueryTypes;

    /**
     * The default target types to attach the provider mutations to.
     *
     * @var array<string>
     */
    public ?array $targetMutationTypes;

    /**
     * @param string               $prefix              A prefix to apply to the name of fields generated by this provider
     * @param string|string[]|null $targetQueryTypes    A list of GraphQL types to add the resolver queries to
     * @param string|string[]|null $targetMutationTypes A list of GraphQL types to add the resolver mutations to
     */
    public function __construct(string $prefix = null, string $service = null, $targetQueryTypes = null, $targetMutationTypes = null)
    {
        $this->prefix = $prefix;
        $this->service = $service;
        $this->targetQueryTypes = is_string($targetQueryTypes) ? [$targetQueryTypes] : $targetQueryTypes;
        $this->targetMutationTypes = is_string($targetMutationTypes) ? [$targetMutationTypes] : $targetMutationTypes;
    }
}
